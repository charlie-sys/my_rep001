from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

import pandas as pd

# Load the datasets
file_paths = [
    '/mnt/data/提取特征后的数据-时域-频域-材料1.xlsx',
    '/mnt/data/提取特征后的数据-时域-频域-材料2.xlsx',
    '/mnt/data/提取特征后的数据-时域-频域-材料3.xlsx',
    '/mnt/data/提取特征后的数据-时域-频域-材料4.xlsx'
]

# Load all data into a single DataFrame
data_frames = [pd.read_excel(file) for file in file_paths]

# Adding material type based on the order of the files
material_types = ['材料1', '材料2', '材料3', '材料44']

# Adding material type to each DataFrame before concatenation
for i, df in enumerate(data_frames):
    df['Material'] = material_types[i]

combined_data = pd.concat(data_frames, ignore_index=True)

# Display basic information about the combined dataset
combined_data.info()

# Display the first few rows to understand the structure
combined_data.head()




# 数据预处理
# 1. 编码类别特征 '励磁波形'
label_encoder = LabelEncoder()
combined_data['励磁波形'] = label_encoder.fit_transform(combined_data['励磁波形'])

combined_data['Material'] = label_encoder.fit_transform(combined_data['Material'])
# 2. 定义特征和目标值
X = combined_data.drop(columns=['磁芯损耗，w/m3'])
y = combined_data['磁芯损耗，w/m3']

# 3. 标准化特征
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 4. 划分训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# 构建和评估模型
# 定义模型
models = {
    "Linear Regression": LinearRegression(),
    "Random Forest": RandomForestRegressor(random_state=42),
    "Support Vector Regression": SVR()
}

# 训练并评估模型
results = {}
for name, model in models.items():
    # 使用交叉验证评估模型
    cv_scores = cross_val_score(model, X_train, y_train, cv=5, scoring='neg_mean_squared_error')
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    
    # 计算评估指标
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    
    # 保存结果
    results[name] = {
        "CV Mean MSE": -np.mean(cv_scores),
        "Test MSE": mse,
        "Test R²": r2
    }

# 将结果转换为DataFrame并展示
results_df = pd.DataFrame(results).T
results_df
